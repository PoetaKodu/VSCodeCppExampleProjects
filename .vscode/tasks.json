{
	// See https://go.microsoft.com/fwlink/?LinkId=733558
	// for the documentation about the tasks.json format
	"version": "2.0.0",
	"tasks": [

		/////////////////////////////////////////////
		// # Project files generation
		/////////////////////////////////////////////

		// ## GCC
		{
			"label": "Generate build files (GCC)",
			"group": "none",
			"type": "shell",
			"command": "premake5 gmake"
		},
		// ## VS2017
		{
			"label": "Generate build files (VS2017)",
			"group": "none",
			"type": "shell",
			"command": "premake5 vs2017"
		},

		/////////////////////////////////////////////
		// # Project building: 
		/////////////////////////////////////////////

		// ## GCC
		{
			// Generate build files first:
			"dependsOn": [
				"Generate build files (GCC)"
			],

			
			"label": "Build (GCC)",
			"type": "shell",
			"group": "build",
			"command": "mingw32-make",
			"args": [
				"config=${input:buildConfigGMake}"
			],
			"options": {
				"cwd": "${workspaceFolder}/Build"
			},
			"problemMatcher": [
				{
					"base": "$gcc",
					"fileLocation": ["relative", "${workspaceRoot}/build/whatever"]
				}
			]
		},
		// ## VS2017
		{
			// Generate build files first:
			"dependsOn": [
				"Generate build files (VS2017)"
			],

			"label": "Build (VS2017)",
			"type": "shell",
			"command": "msbuild VSCodeCppExampleProjects.sln",
			"args": [
				"/m",
				"/property:Configuration=${input:buildConfigVS2017}",
				"/property:Platform=${input:buildPlatformVS2017}",
				// Ask msbuild to generate full paths for file names.
				"/property:GenerateFullPaths=true",
				"/t:build"
			],
			"options": {
				"cwd": "${workspaceFolder}/Build"
			},
			"group": "build",
			"presentation": {
				// Reveal the output only if unrecognized errors occur.
				"reveal": "silent"
			},
			// Use the standard MS compiler pattern to detect errors, warnings and infos
			"problemMatcher": "$msCompile"
		},

		// # Cleaning:

		// ## Clean build files
		{
			"label": "Clean BUILD folder",
			"windows": {
				"command": "rmdir Build /s /q && echo Cleaning BUILD folder."
			},
			"linux": {
				"command": "rm -r Build && echo Cleaning BUILD folder."
			},
			"type": "shell",
			"group": "none"
		},
		// ## Clean bin files
		{
			"label": "Clean BIN folder",
			"windows": {
				"command": "rmdir Bin /s /q && echo Cleaning BIN folder."
			},
			"linux": {
				"command": "rm -r Bin && echo Cleaning BIN folder."
			},
			"type": "shell",
			"group": "none"
		},

		// # Rebuild:
		
		// ## Rebuild (GCC)
		{
			"dependsOn": [
				"Clean BUILD folder",
				"Build (GCC)"
			],

			"label": "Rebuild (GCC)",
			"group": "build",
			"problemMatcher": "$gcc"
		},

		// ## Rebuild (VS2017)
		{
			"dependsOn": [
				"Clean BUILD folder",
				"Build (VS2017)"
			],

			"label": "Rebuild (VS2017)",
			"group": "build",
			"problemMatcher": "$msCompile"
		}
	],
	"inputs": [
        {
            "id": "buildConfigGMake",
            "description": "Select build config for GCC:",
            "default": "debug_x86",
            "type": "pickString",
            "options": ["debug_x86", "debug_x64", "release_x86", "release_x64"]
        },
        {
            "id": "buildConfigVS2017",
            "description": "Select build config for VS2017:",
            "default": "Debug",
            "type": "pickString",
            "options": ["Debug", "Release"]
		},
		{
            "id": "buildPlatformVS2017",
            "description": "Select build platform for VS2017:",
            "default": "Win32",
            "type": "pickString",
            "options": ["Win32", "x64"]
        }
    ]
}